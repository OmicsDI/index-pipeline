<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:bean="http://www.springframework.org/schema/beans" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
		                   http://www.springframework.org/schema/batch
                           http://www.springframework.org/schema/batch/spring-batch.xsd
		                   http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util
                           http://www.springframework.org/schema/util/spring-util-3.1.xsd">

    <description>
        This job generate the XML for a ArrayExpress to be submitted to OmicsDI system.
    </description>

    <import resource="../context/common-context.xml"/>
    <import resource="../context/db-job-repository.xml"/>
    <import resource="../context/mongo-db-context.xml" />


    <batch:job id="ddiImportJob" xmlns="http://www.springframework.org/schema/batch">

        <batch:step id="generateXML" parent="parentStep" next="validateXMLStep">
            <batch:tasklet>
                <bean:bean id="generateXMLStep" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.generation.GenerationArrayExpressXML">
                    <bean:property name="experimentFileName" value="${ddi.common.arrayexpress.experiment.file}"/>
                    <bean:property name="protocolFileName" value="${ddi.common.arrayexpress.protocol.file}"/>
                    <bean:property name="outputFile"  value="${ddi.common.original.directory}/${ddi.common.arrayexpress.database.index}/${ddi.common.arrayexpress.original.file}" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>

        <batch:step id="validateXMLStep" parent="parentStep" next="splitterStep">
            <batch:tasklet>
                <bean:bean id="validateEbEXmlTasklet" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.validation.ValidationOriginalDataTasklet">
                    <bean:property name="directory" value="${ddi.common.original.directory}/${ddi.common.arrayexpress.database.index}"/>
                    <bean:property name="reportName" value="${ddi.common.original.report.name}"/>
                </bean:bean>
            </batch:tasklet>
        </batch:step>

        <batch:step id="splitterStep" parent="parentStep" next="importDataStep">
            <batch:tasklet>
                <bean:bean id="splitterTasklet" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.io.SplitterFromSource">
                    <bean:property name="inputDirectory" value="file:${ddi.common.original.directory}/${ddi.common.arrayexpress.database.index}"/>
                    <bean:property name="outputDirectory" value="file:${ddi.common.data.directory}/${ddi.common.arrayexpress.database.index}"/>
                    <bean:property name="originalPrefix"  value="${ddi.common.arrayexpress.original.file}" />
                    <bean:property name="numberEntries"   value="${ddi.common.multiple.file.number.entries}"/>
                    <bean:property name="filePrefix"      value="${ddi.common.arrayexpress.prefix}" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>

        <batch:step id="importDataStep" parent="parentStep" next="annotationFiles">
            <batch:tasklet>
                <bean:bean id="annotationTasklet" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.database.DatasetImportTasklet">
                    <bean:property name="inputDirectory" value="file:${ddi.common.data.directory}/${ddi.common.arrayexpress.database.index}"/>
                    <bean:property name="datasetAnnotationService" ref="datasetAnnotationService" />
                    <bean:property name="databaseAnnotationService" ref="databaseAnnotationService" />
                    <bean:property name="databaseName" value="${ddi.common.arrayexpress.database.name}" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>
        <batch:step id="annotationFiles" parent="parentStep" next="enrichmentStep">
            <batch:tasklet>
                <bean:bean id="annotationArrayExpressTasklet" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.annotation.ArrayExpressAnnotationTasklet">
                    <bean:property name="databaseName" value="${ddi.common.arrayexpress.database.name}"/>
                    <bean:property name="datasetAnnotationService" ref="datasetAnnotationService" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>

        <batch:step id="enrichmentStep" parent="parentStep" next="datasetFileRetrieve">
            <batch:tasklet>
                <bean:bean id="enrichmentTask" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.enrichment.EnrichmentXMLTasklet">
                    <bean:property name="databaseName" value="${ddi.common.arrayexpress.database.name}" />
                    <bean:property name="annotationService" ref="annotationService"/>
                    <bean:property name="datasetAnnotationService" ref="datasetAnnotationService" />
                    <bean:property name="databaseAnnotationService" ref="databaseAnnotationService" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>

        <batch:step id="datasetFileRetrieve" parent="parentStep" next="cleanIFolder">
            <batch:tasklet>
                <bean:bean id="retrieveFileUrlStep" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.dataset.DatasetFileUrlRetrieveTasklet">
                    <bean:property name="datasetService" ref="datasetService" />
                    <bean:property name="databaseDetailService" ref="databaseDetailService" />
                    <bean:property name="overwrite" value="false" />
                    <bean:property name="databaseName" value="${ddi.common.arrayexpress.database.name}" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>

        <batch:step id="cleanIFolder" next="writeIIndexes" parent="parentStep">
            <batch:tasklet>
                <bean:bean id="cleanIPreProdTasklet" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.io.CleanDirectoryTasklet">
                    <bean:property name="inputDirectory" value="file:${ddi.common.preprod.directory}/${ddi.common.arrayexpress.database.index}" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>

        <batch:step id="writeIIndexes" next="cleanIProdFolder" parent="parentStep" >
            <batch:tasklet>
                <bean:bean id="generateFromSourceJobTasklet" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.database.DatasetExportTasklet">
                    <bean:property name="databaseName" value="${ddi.common.arrayexpress.database.name}" />
                    <bean:property name="outputDirectory" value="file:${ddi.common.preprod.directory}/${ddi.common.arrayexpress.database.index}"/>
                    <bean:property name="filePrefix"      value="${ddi.common.arrayexpress.prefix}" />
                    <bean:property name="numberEntries"   value="${ddi.common.multiple.file.number.entries}" />
                    <bean:property name="databaseService" ref="databaseAnnotationService" />
                    <bean:property name="datasetAnnotationService"  ref="datasetAnnotationService" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>
        <batch:step id="cleanIProdFolder" next="copyIFiletoProd" parent="parentStep">
            <batch:tasklet>
                <bean:bean id="cleanIProdTasklet" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.io.CleanDirectoryTasklet">
                    <bean:property name="inputDirectory" value="file:${ddi.common.prod.directory}/${ddi.common.arrayexpress.database.index}" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>
        <batch:step id="copyIFiletoProd" parent="parentStep">
            <batch:tasklet>
                <bean:bean id="copyIFileToDirectoryTasklet" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.io.CopyFilesWithPatternFromSourceTasklet">
                    <bean:property name="inputDirectory"      value="file:${ddi.common.preprod.directory}/${ddi.common.arrayexpress.database.index}"/>
                    <bean:property name="outputDirectory" value="file:${ddi.common.prod.directory}/${ddi.common.arrayexpress.database.index}"/>
                    <bean:property name="pattern" value="${ddi.common.original.pattern}" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>
        <batch:listeners>
            <batch:listener ref="jobListener"/>
        </batch:listeners>
    </batch:job>

    <batch:job id="ddiAnnotationJob" xmlns="http://www.springframework.org/schema/batch">
        <batch:step id="annotationFile" parent="parentStep">
            <batch:tasklet>
                <bean:bean id="annotationArrayExpressTasklet" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.annotation.ArrayExpressAnnotationTasklet">
                    <bean:property name="databaseName" value="${ddi.common.arrayexpress.database.name}"/>
                    <bean:property name="datasetAnnotationService" ref="datasetAnnotationService" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>
    </batch:job>

    <batch:job id="ddiEnrichmentJob" xmlns="http://www.springframework.org/schema/batch">
        <batch:step id="enrichmentStepjob" parent="parentStep">
            <batch:tasklet>
                <bean:bean id="enrichmentTask" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.enrichment.EnrichmentXMLTasklet">
                    <bean:property name="databaseName" value="${ddi.common.arrayexpress.database.name}" />
                    <bean:property name="annotationService" ref="annotationService"/>
                    <bean:property name="datasetAnnotationService" ref="datasetAnnotationService" />
                    <bean:property name="databaseAnnotationService" ref="databaseAnnotationService" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>
    </batch:job>

    <batch:job id="generatetionJob" xmlns="http://www.springframework.org/schema/batch">
        <batch:step id="cleanFolder" next="writeIndexes" parent="parentStep">
            <batch:tasklet>
                <bean:bean id="cleanGPreProdTasklet" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.io.CleanDirectoryTasklet">
                    <bean:property name="inputDirectory" value="file:${ddi.common.preprod.directory}/${ddi.common.arrayexpress.database.index}" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>

        <batch:step id="writeIndexes" next="cleanGProdFolder" parent="parentStep" >
            <batch:tasklet>
                <bean:bean id="generateFromSourceJobTasklet" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.database.DatasetExportTasklet">
                    <bean:property name="databaseName" value="${ddi.common.arrayexpress.database.name}" />
                    <bean:property name="outputDirectory" value="file:${ddi.common.preprod.directory}/${ddi.common.arrayexpress.database.index}"/>
                    <bean:property name="filePrefix"      value="${ddi.common.arrayexpress.prefix}" />
                    <bean:property name="numberEntries"   value="${ddi.common.multiple.file.number.entries}" />
                    <bean:property name="databaseService" ref="databaseAnnotationService" />
                    <bean:property name="datasetAnnotationService"  ref="datasetAnnotationService" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>
        <batch:step id="cleanGProdFolder" next="copyGFiletoProd" parent="parentStep">
            <batch:tasklet>
                <bean:bean id="cleanGProdTasklet" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.io.CleanDirectoryTasklet">
                    <bean:property name="inputDirectory" value="file:${ddi.common.prod.directory}/${ddi.common.arrayexpress.database.index}" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>
        <batch:step id="copyGFiletoProd" parent="parentStep">
            <batch:tasklet>
                <bean:bean id="copyGFileToDirectoryTasklet" scope="step" class="uk.ac.ebi.ddi.pipeline.indexer.tasklet.io.CopyFilesWithPatternFromSourceTasklet">
                    <bean:property name="inputDirectory"      value="file:${ddi.common.preprod.directory}/${ddi.common.arrayexpress.database.index}"/>
                    <bean:property name="outputDirectory" value="file:${ddi.common.prod.directory}/${ddi.common.arrayexpress.database.index}"/>
                    <bean:property name="pattern" value="${ddi.common.original.pattern}" />
                </bean:bean>
            </batch:tasklet>
        </batch:step>
    </batch:job>
    <batch:step id="parentStep" abstract="true">
        <batch:listeners>
            <batch:listener ref="executionContextPromotionListener"/>
            <batch:listener ref="throwablePromotionListener"/>
        </batch:listeners>
    </batch:step>

    <!--listener for promoting properties in step execution context to job execution context-->
    <bean:bean id="executionContextPromotionListener" class="org.springframework.batch.core.listener.ExecutionContextPromotionListener">
        <bean:property name="keys">
            <bean:array>
                <bean:value>public.path.fragment</bean:value>
                <!-- added by getAndStoreOrigPublicationDateTaskletStep; used by genPublicSearchParamsStep -->
            </bean:array>
        </bean:property>
        <bean:property name="strict" value="false"/>
    </bean:bean>

    <!--load property files-->
    <context:property-placeholder location="classpath:prop/common.properties" ignore-unresolvable="true" order="1"/>


</beans>
